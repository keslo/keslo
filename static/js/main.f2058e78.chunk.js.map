{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","collide","dX","dY","piece","state","board","posX","posY","width","height","iY","length","iX","x","y","draw","temp","step","JSON","parse","stringify","undefined","setState","down","clearInterval","timerId","btnText","gameOver","alert","getPiece","move","e","keyCode","check","score","emptyRow","Array","fill","join","incScore","newBoard","filter","el","unshift","rotate","preventDefault","pieceVar","pieceType","pieces","newVar","Math","round","random","start","setInterval","componentDidMount","document","addEventListener","this","html","map","row","i","className","key","col","j","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2058e78.chunk.js","sourcesContent":["import React, { Component }  from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      /*board: [\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0]\r\n      ],*/\r\n      board:JSON.parse(JSON.stringify(new Array(20).fill(new Array(10).fill(0)))),\r\n      temp: [],\r\n      score: 0,\r\n      posX: 4,\r\n      posY: 0,\r\n      width: 10,\r\n      height: 20,\r\n      step: 0,\r\n      piece: [],\r\n      pieceVar: 0,  // исполнение фигуры\r\n      pieceType: 0, // фигура\r\n      pieces: [\r\n        [ // stick\r\n          [\r\n            [0,0,0,0],\r\n            [1,1,1,1],\r\n            [0,0,0,0],\r\n            [0,0,0,0]\r\n          ],\r\n          [\r\n            [0,1,0,0],\r\n            [0,1,0,0],\r\n            [0,1,0,0],\r\n            [0,1,0,0]\r\n          ]\r\n        ],\r\n        [ // square\r\n          [\r\n            [1,1],\r\n            [1,1]\r\n          ]\r\n        ],\r\n        [ // |__\r\n          [\r\n            [1,0,0],\r\n            [1,1,1],\r\n            [0,0,0]\r\n          ],\r\n          [\r\n            [0,1,1],\r\n            [0,1,0],\r\n            [0,1,0]\r\n          ],\r\n          [\r\n            [0,0,0],\r\n            [1,1,1],\r\n            [0,0,1]\r\n          ],\r\n          [\r\n            [0,1,0],\r\n            [0,1,0],\r\n            [1,1,0]\r\n          ]\r\n        ],\r\n        [ // __|\r\n          [\r\n            [0,0,1],\r\n            [1,1,1],\r\n            [0,0,0]\r\n          ],\r\n          [\r\n            [0,1,0],\r\n            [0,1,0],\r\n            [0,1,1]\r\n          ],\r\n          [\r\n            [0,0,0],\r\n            [1,1,1],\r\n            [1,0,0]\r\n          ],\r\n          [\r\n            [1,1,0],\r\n            [0,1,0],\r\n            [0,1,0]\r\n          ],\r\n        ],\r\n        [ // Z_RIGHT\r\n          [\r\n            [0,1,1],\r\n            [1,1,0],\r\n            [0,0,0]\r\n          ],\r\n          [\r\n            [0,1,0],\r\n            [0,1,1],\r\n            [0,0,1]\r\n          ]\r\n        ],\r\n        [ // Z_LEFT\r\n          [\r\n            [1,1,0],\r\n            [0,1,1],\r\n            [0,0,0]\r\n          ],\r\n          [\r\n            [0,1,0],\r\n            [1,1,0],\r\n            [1,0,0]\r\n          ],\r\n        ],\r\n        [ // T\r\n          [\r\n            [0,1,0],\r\n            [1,1,1],\r\n            [0,0,0]\r\n          ],\r\n          [\r\n            [0,1,0],\r\n            [0,1,1],\r\n            [0,1,0]\r\n          ],\r\n          [\r\n            [0,0,0],\r\n            [1,1,1],\r\n            [0,1,0]\r\n          ],\r\n          [\r\n            [0,1,0],\r\n            [1,1,0],\r\n            [0,1,0]\r\n          ],\r\n        ]\r\n      ],\r\n      btnText: 'Start',\r\n      gameOver: false\r\n    }\r\n  }\r\n\r\n  collide = (dX, dY, piece) => {\r\n    let { board, posX, posY, width, height } = this.state\r\n    for (let iY=0; iY<piece.length;iY++) {\r\n      for (let iX=0; iX<piece[iY].length; iX++) {\r\n        // если пустая ячейка, то идем дальше\r\n        if (piece[iY][iX] == 0) continue ;\r\n        // вычисляем текущую координату элемента фигуры\r\n        let x = posX + dX + iX;\r\n        let y = posY + dY + iY;\r\n        // проверяем на выход за края\r\n        if (x < 0 || x > width-1 || y >= height) return 'true height';\r\n        // если отрицательный Y, то норм\r\n        if (y <= 0) continue;\r\n        // проверяем столкновение с board\r\n        if (board[y][x] == 1) return 'true board';\r\n      }\r\n    }\r\n\r\n    return 'false';\r\n  }\r\n\r\n  draw = () => {\r\n    let { board, posX, posY, piece, step } = this.state;\r\n    let temp = JSON.parse(JSON.stringify(board)); \r\n    for (var y=0; y<piece.length; y++) {\r\n      for (var x=0; x<piece[y].length; x++) {\r\n        if (temp[y+posY] !== undefined) {\r\n          if (temp[y+posY][x+posX] !== undefined) {\r\n            temp[y+posY][x+posX] = board[y+posY][x+posX] ? 1 : piece[y][x];\r\n          } \r\n        }\r\n      }\r\n    }\r\n    this.setState({ temp });\r\n  }\r\n\r\n  down = () => {\r\n    let { posX, posY, piece, step, board, temp } = this.state\r\n    let isCollade = this.collide(0, 1, piece);\r\n    if (isCollade == 'false') {\r\n      this.setState({ posY: ++posY, step: ++step });\r\n    } else {\r\n      if (posY < 1) {\r\n        clearInterval(this.timerId);\r\n        this.setState({ btnText: 'New Game?', gameOver: true });\r\n        alert('GAME OVER');\r\n      } else {\r\n        this.setState({ posY: 0, board: [...temp], posX: 4 });\r\n        this.getPiece();\r\n      }\r\n    }\r\n  }\r\n\r\n  move = (e) => {\r\n    let { piece, posX, temp } = this.state;\r\n    let dX = 0;\r\n    if (e.keyCode == '37' ) { // Left\r\n      dX = -1;\r\n    } else if (e.keyCode == '39') { // Right\r\n      dX = 1;\r\n    }\r\n    var isCollide = this.collide(dX, 0, piece);\r\n    if (isCollide == 'false') {\r\n      this.setState({ posX: posX+dX });\r\n    }\r\n  }\r\n\r\n  check = () => {\r\n    var { board, width, height, score } = this.state;\r\n    var emptyRow = new Array(10).fill('1').join('');\r\n    var incScore = 0;\r\n    var newBoard = board.filter((el) => {\r\n      return el.join('') !== emptyRow;\r\n    })\r\n    while (newBoard.length < height) {\r\n      newBoard.unshift(new Array(10).fill(0));\r\n      incScore++;\r\n    }\r\n    this.setState({ board: newBoard, score: score+incScore });\r\n  }\r\n\r\n  rotate = (e) => {\r\n    if (e.keyCode == '38' ) { // Up\r\n      e.preventDefault();\r\n      var { pieceVar, pieceType, piece, pieces } =  this.state;\r\n      var newVar = ++pieceVar % pieces[pieceType].length;\r\n      if (this.collide(0, 0, pieces[pieceType][newVar]) == 'false') {\r\n        this.setState({ pieceVar: newVar, piece: pieces[pieceType][newVar] });\r\n      }\r\n    }\r\n  }\r\n\r\n  getPiece = () => {\r\n    var { pieces } = this.state;\r\n    var pieceType = Math.round((pieces.length-1) * Math.random());\r\n    var pieceVar  = Math.round((pieces[pieceType].length-1) * Math.random());\r\n    this.setState({ pieceType, pieceVar, piece: pieces[pieceType][pieceVar] });\r\n  }\r\n\r\n  start = () => {\r\n    var { width, height } = this.state;\r\n    if (this.timerId === undefined || this.state.gameOver == true) {\r\n      this.getPiece();\r\n      this.setState({ gameOver: false, board: JSON.parse(JSON.stringify(new Array(height).fill(new Array(width).fill(0)))) });\r\n      this.timerId = setInterval( () => {\r\n        this.down();\r\n        this.draw();\r\n        this.check();\r\n     }, 200);\r\n    }\r\n    this.setState({ btnText: 'YO! :)' });\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // инициализация игрового поля\r\n    //this.setState({ temp: JSON.parse(JSON.stringify(new Array(this.state.height).fill(new Array(this.state.width).fill(0)))) });\r\n    // инициализация действий клавиатуры\r\n    document.addEventListener('keydown', (e) => {\r\n      this.move(e);\r\n      this.rotate(e);\r\n      this.draw();\r\n    })\r\n    this.draw();\r\n  }\r\n\r\n  render() {\r\n    var { temp, score, btnText } = this.state;\r\n    var html = temp.map((row,i) => {\r\n      return <div className=\"row\" key={i}>\r\n        { row.map((col, j) => <div className={ col ? \"brick on\" : \"brick\" } key={j}></div> ) }\r\n      </div>\r\n    })\r\n    return (\r\n      <div className=\"App\">\r\n      <div className=\"header\">\r\n        <span>Score: { score }</span>\r\n        <button onClick={this.start}>{ btnText }</button>\r\n      </div>\r\n      <div className=\"board\">\r\n        { html }\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}